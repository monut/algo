vector <int> 
mergeArrays(vector <vector<int> > arr) {
    /*
        Find the order if ascending or descending
        create a priority queue 
        insert the first element from each of the K queue
        {val { number_of_q, index_in_that_q} }
        Pop the top item from pq and get the next element from 
        the Q to which that element belongs. Else go to the next q
     */
    int num_q = arr.size();
    
     
    bool ascend_flag = false;
    if(arr[0][0] > arr[0][1])
            ascend_flag = true;
    using pp = pair<int, pair<int, int> >;
    function<bool(pp, pp)> comp;
    
    if(ascend_flag)
        comp = [](pp a, pp b){ return a.first < b.first;};
    else 
        comp = [](pp a, pp b){ return a.first > b.first;};
        
    priority_queue<pp, vector<pp>, decltype(comp)> pq(comp);
    
    // pushing first elements from all the K queues
    for(int i = 0; i < num_q; i++){
        pq.emplace(arr[i][0], pair<int,int>(i, 0));
    }
    
    vector<int> res;
    while(!pq.empty()){
        auto val = pq.top();
        pq.pop();
        cout << val.first << endl;
        res.push_back(val.first);
        int nxt_q = val.second.first;
        int nxt_q_idx = val.second.second + 1;
        if(arr[nxt_q].size() <= nxt_q_idx) {
            continue;
        } else {
            pq.emplace(arr[nxt_q][nxt_q_idx], pair<int, int>(nxt_q, nxt_q_idx));
        }
    }
    return res;
}

