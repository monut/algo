
// advance through array
bool advancearray(vector<int> arr) {
    int max = 0;
    for(int i = 0; i < arr.size(); i++) {
      if(max < arr[i] + i) { 
        max = arr[i] + i;
      }
    }
    if(max >= i) return true;
    return false;
}

// delete entries from a sorted array
int deledupsort(vector<int> arr){
  int prev = 0;
  int idx = 0;
  for(int i = 0; i < arr.size(); i++) {
    if(prev != a[i]) { // not duplicate
        prev = a[i];
        a[idx++] = a[i];
    } else { // if same don't move the index
      prev = a[i];
    }
  }
}
//#########buy sell stock twice
int buyselltwice(vector<int> arr) {
    vector<int> ltor;
    int min_price = numeric_limits<int>::max();
    int max_profit = 0;
    
    for(int i = 0; i < arr.size(); i++) {
        int profit = arr[i] - min_price;
        max_profit = max(max_profit, profit);
        ltor.push_back(max_profit);
        min_price = min(min_price, arr[i]);
    }
    
    vector<int> rtol;
    max_profit = 0;
    int max_price = numeric_limis<int>::min();
    for(int i = arr.size() - 1; i >= 0; i--) {
        int profit = max_price - arr[i];
        max_profit = max(max_profit, profit);
        ltor.push_back(max_profit);
        max_price = max(max_price, arr[i]);
    }

    int max_profit = rtol[0]; // hangle teh case ltor[0 - 1] + rtol[0] case;
    
    for(int i = 1; i < arr.size(); i++) {
        int profit = ltor[i-1] + rtol[i];
        max(max_profit, profit);
    }
    return max_profit;
 }
 
 // apply permutation 
 
void app_permutation(vector<int>& arr, vector<int>& perm) {
    for(int i = 0; i < arr.size(); i++) {
        if(perm[i] >= 0 ) {
            gothtoughperm(i, arr,perm);
        }
    }
}
gothroughperm(int start; vector<int>& arr, vector<int>& perm) {
    int i = start;
    int temp = arr[i];
    do {
        int nxt_i = perm[i];
        int ntx_temp = arr[nxt_i];
        arr[nxt_i] = temp;
        i = nxt_i; temp = nxt_temp;
        
    } while( i != start);
    
}

// Find with random probability
// there are N! permutation and we have to choose one of them
// we call we look for an inde in [0, i];
void randomprob(vector<int>& sh){
    for(int i = sh.size()-1; i >=0; i--){
        int idx = uniform_distribution_random(i+1);
        swap(arr[i], arr[idx]);
    }
}

// Generate non uniform random numbers.


// rotate array elements 
int main() {

    vector<int> vec = {1, 2, 3, 4, 5};
    int i = 2;
    // rotate by 2
    reverse(vec.begin(), vec.end());
    reverse(vec.begin(), vec.begin() + i);
    reverse(vec.begin() + i + 1, vec.end());
    
    for_each(vec.begin(), vec.end(), [](int a){cout << a << " ";});
}
