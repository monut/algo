
vector<bool> visited;

void 
explore(int v, vector<string>& g){
    // size of string same # of strings
    // as this is adjacency matrix
    // explore vertices reachable from vertex v
    visited[v] = true;
    string zlink = g[v];
    int cols = g[v].length();
    for(int i = 0; i < cols; i++){
        // explore all other edges reachable from this vertix
        // which have not been visited from here
        if(i != v && zlink[i] == '1'){
            if(visited[i] == false){
                explore(i, g);
            }
        }
    }
}
int
DFS(vector<string> g){
    int num_v = g.size();
    visited.assign(num_v, false);
    // visit all vertices
    int con = 0;
    
    for(int i = 0; i < num_v; i++){
        if(visited[i] == false){
            con++;
            explore(i,g);
        }
    }
    return con;
}

int 
zombieCluster(vector<string> zombies) {
    if(zombies.size() == 0)
        return 0;
    return DFS(zombies);
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int zombies_count;
    cin >> zombies_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<string> zombies(zombies_count);

    for (int i = 0; i < zombies_count; i++) {
        string zombies_item;
        getline(cin, zombies_item);

        zombies[i] = zombies_item;
    }

    int res = zombieCluster(zombies);

    fout << res << "\n";

    fout.close();

    return 0;
}
